package es.zed.controller;

import es.zed.common.AbstractEvent;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.core.MessageProperties;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.PropertySource;

/**
 * Abstract amqp controller.
 * @param <T> abstract event.
 */
@Slf4j
@PropertySource("classpath:amqp-config.properties")
public abstract class AbstractAmqpController<T extends AbstractEvent<?>> {

  /**
   * Rabbit template used to send the notification requests to the mail channel queue.
   */
  private final RabbitTemplate requestTemplate;

  /**
   * The name of the notifications response/result exchange.
   */
  @Value("${producer.exchange.name}")
  private String producerExchangeName;

  /**
   * Constructor.
   *
   * @param requestTemplate template.
   * @param producerExchangeName producer name.
   */
  public AbstractAmqpController(final RabbitTemplate requestTemplate, final String producerExchangeName) {
    this.requestTemplate = requestTemplate;
    this.producerExchangeName = producerExchangeName;
  }


  /**
   * Receive and send the given {@link AbstractEvent}.
   *
   * @param event the event object converted to be sent.
   */
  public void publish(final T event) {
    log.debug("Sending the {}, generated by {}. ", event.getClass().getName(), event.getOrigin());
    requestTemplate.convertAndSend(producerExchangeName, event.getTypeId(), event);
  }

  /**
   * Receive and send the given {@link AbstractEvent}.
   *
   * @param event the event object converted to be sent.
   * @param priority priority of event.
   */
  public void publish(final T event, final Integer priority) {
    log.debug("Sending the {}, generated by {} with priority {}. ", event.getClass().getName(), event.getOrigin(), priority);
    MessageProperties messageProperties = new MessageProperties();
    messageProperties.setPriority(priority);
    Message message = requestTemplate.getMessageConverter().toMessage(event, messageProperties);
    requestTemplate.send(producerExchangeName, event.getTypeId(), message);
  }
}
